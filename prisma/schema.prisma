datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
  binaryTargets   = ["debian-openssl-3.0.x"]
}

// previewFeatures = ["omitApi"]
// TODO:LOGIN
// TODO:OPT

model Otp {
  id        Int             @id @default(autoincrement())
  to        String?
  code      String
  duration  OptDurationEnum @default(MIN_15)
  via       OptViaEnum      @default(MAIL)
  createdAt DateTime?       @default(now())
  updatedAt DateTime?       @updatedAt

  @@map("otp")
}

// TODO:USER

model User {
  id           Int          @id @default(autoincrement())
  displayname  String
  email        String?      @unique
  address      String
  phone        String
  type         USER_TYPE
  dateOfBirth  DateTime?
  laltitude    Decimal?
  longitude    Decimal?
  password     String?
  walletBase   WalletBase   @relation(name: "WalletBaseToUser", fields: [walletBaseId], references: [id])
  walletBaseId Int          @unique
  isActive     Boolean      @default(true)
  isBlocked    Boolean      @default(false)
  isArchived   Boolean      @default(false)
  shop         Shop?        @relation(name: "userToShop", fields: [shopId], references: [id])
  shopId       Int?
  userAlias    UserAlias[]  @relation()
  assignment   Assignment[] @relation(name: "AssignmentToUser")
  role         Role?        @relation(name: "RoleToUser", fields: [roleId], references: [id])
  roleId       Int?

  @@unique([phone, type])
  @@map("user")
}

// TODO:CUSTOMER_ALIAS annuaire (peuvent etre creer a partir du repertoire de l utilisateur )

model UserAlias {
  id          Int       @id @default(autoincrement())
  displayname String
  shop        Shop      @relation(fields: [shopId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  byId        Int?
  shopId      Int
  isActive    Boolean   @default(true)

  shopWalletBase   ShopWalletBase @relation(fields: [shopWalletBaseId], references: [id])
  shopWalletBaseId Int            @unique

  @@unique([shopId, userId])
  @@map("user_alias")
}

// TODO: DEPT_STATUS

model ShopWalletBase {
  id               Int                     @id @default(autoincrement())
  createdAt        DateTime?               @default(now())
  updatedAt        DateTime?               @updatedAt
  userAlias        UserAlias?
  Shop             Shop?
  from             ShopWalletTransaction[] @relation("FromShopWAllet")
  to               ShopWalletTransaction[] @relation("ToShopWAllet")
  shopWalletStatus ShopWalletStatus[]
}

// TODO: DEPT

model ShopWalletTransaction {
  id        Int                     @id @default(autoincrement())
  amount    Decimal
  comment   String?
  type      ShopUserTransactionType
  from      ShopWalletBase          @relation(name: "FromShopWAllet", fields: [fromId], references: [id])
  to        ShopWalletBase          @relation(name: "ToShopWAllet", fields: [toId], references: [id])
  fromId    Int
  toId      Int
  createdAt DateTime?               @default(now())
  updatedAt DateTime?               @updatedAt
  shopId    Int

  @@index([shopId])
  @@map("cusromer_shop_balance")
}

// TODO:SHOP

model Shop {
  id               Int                @id @default(autoincrement())
  walletBase       WalletBase         @relation(name: "WalletBaseToShop", fields: [walletBaseId], references: [id])
  walletBaseId     Int                @unique
  shopWalletBase   ShopWalletBase     @relation(fields: [shopWalletBaseId], references: [id])
  laltitude        Decimal?
  longitude        Decimal?
  address          String?
  name             String?
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  byId             Int?
  cardAllocation   CardAllocation[]   @relation(name: "CardAllocationToShop")
  userrAlias       UserAlias[]        @relation()
  payment          ShopOfferPayment[] @relation(name: "PaymentToShop")
  cardRequest      CardRequest?       @relation(name: "ShopToCardRequest")
  user             User[]             @relation(name: "userToShop")
  shopWalletBaseId Int                @unique
  inventory        Inventory[]
}

// TODO:WALLET_BASE

model WalletBase {
  id              Int                 @id @default(autoincrement())
  type            EntityEnum
  isLocked        Boolean             @default(false)
  lockedById      Int?
  lockedAt        DateTime?
  fromTransaction WalletTransaction[] @relation(name: "FromTRansaction")
  toTransaction   WalletTransaction[] @relation(name: "ToTransaction")
  walletStatus    WalletStatus[]      @relation(name: "WalletBaseToWalletStatus")
  shop            Shop?               @relation(name: "WalletBaseToShop")
  isActive        Boolean             @default(true)
  user            User?               @relation(name: "WalletBaseToUser")
}

// TODO: WALLET_STATUS

model WalletStatus {
  id           Int        @id @default(autoincrement())
  walletBase   WalletBase @relation(name: "WalletBaseToWalletStatus", fields: [walletBaseId], references: [id])
  totalDebit   Decimal
  totalCredit  Decimal
  walletBaseId Int
  createdAt    DateTime?  @default(now())
}

// TODO:TRANSACTION

model WalletTransaction {
  id           Int        @id @default(autoincrement())
  from         WalletBase @relation(name: "FromTRansaction", fields: [fromId], references: [id])
  to           WalletBase @relation(name: "ToTransaction", fields: [toId], references: [id])
  fromId       Int
  toId         Int
  amount       Decimal
  createdAt    DateTime?  @default(now())
  updatedAt    DateTime?  @updatedAt
  walletBaseId Int?
}

// TODO:CARD

model Card {
  id                   Int                    @id @default(autoincrement())
  serial               String                 @unique
  assignment           Assignment[]           @relation(name: "AssignmentToCard")
  isActive             Boolean                @default(false)
  createdAt            DateTime?              @default(now())
  updatedAt            DateTime?              @updatedAt
  cardAllocationDetail CardAllocationDetail[] @relation(name: "CardToCardAllocationDetail")
  byId                 Int?
}

// TODO:CARD_ALOCATION

model CardAllocation {
  id                   Int                    @id @default(autoincrement())
  shop                 Shop                   @relation(name: "CardAllocationToShop", fields: [shopId], references: [id])
  isActive             Boolean                @default(false)
  createdAt            DateTime?              @default(now())
  updatedAt            DateTime?              @updatedAt
  shopId               Int
  cardAllocationDetail CardAllocationDetail[] @relation(name: "CardAllocationToCardAllocationDetail")
  byId                 Int?
}

// TODO:CARD_REQUEST

model CardRequest {
  id                Int                @id @default(autoincrement())
  label             String
  isActive          Boolean            @default(false)
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  shopId            Int
  quantity          Int
  status            CardRequestEnum
  shop              Shop?              @relation(name: "ShopToCardRequest", fields: [shopId1], references: [id])
  shopId1           Int?               @unique
  byId              Int?
  cardrequeststatus CardRequestStatus? @relation(name: "CardRequestToCardRequestStatus")
}

// TODO:CARD_REQUEST_STATUS

model CardRequestStatus {
  id            Int             @id @default(autoincrement())
  status        CardRequestEnum
  byId          Int?
  cardRequest   CardRequest     @relation(name: "CardRequestToCardRequestStatus", fields: [cardRequestId], references: [id])
  cardRequestId Int             @unique
  comment       String?
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
}

// TODO:CARD_ALOCATION_DETAIL

model CardAllocationDetail {
  card             Card           @relation(name: "CardToCardAllocationDetail", fields: [cardId], references: [id])
  cardAllocation   CardAllocation @relation(name: "CardAllocationToCardAllocationDetail", fields: [cardAllocationId], references: [id])
  cardId           Int
  cardAllocationId Int

  @@id([cardAllocationId, cardId])
}

// TODO:ASSIGNMENT

model Assignment {
  user      User      @relation(name: "AssignmentToUser", fields: [userId], references: [id])
  card      Card      @relation(name: "AssignmentToCard", fields: [cardId], references: [id])
  userId    Int
  cardId    Int
  isActive  Boolean   @default(false)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  byId      Int?

  @@id([userId, cardId])
}

// TODO:MODULE

model Module {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  permission Permission[] @relation(name: "ModuleToPermission")
  isActive   Boolean      @default(true)
}

// TODO:ROLE

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @updatedAt
  comment        String?
  byId           Int?
  isActive       Boolean          @default(true)
  rolePermission RolePermission[] @relation(name: "RoleToRolePermission")
  User           User[]           @relation(name: "RoleToUser")
}

// TODO:ROLE_PERMISSION

model RolePermission {
  role         Role       @relation(name: "RoleToRolePermission", fields: [roleId], references: [id])
  permission   Permission @relation(name: "PermissionToRolePermission", fields: [permissionId], references: [id])
  roleId       Int
  permissionId Int

  @@id([roleId, permissionId])
}

// TODO:PERMISSION

model Permission {
  id             Int                  @id @default(autoincrement())
  code           String               @unique
  comment        String?
  module         Module               @relation(name: "ModuleToPermission", fields: [moduleId], references: [id])
  moduleId       Int
  action         PermissionActionEnum
  createdAt      DateTime?            @default(now())
  updatedAt      DateTime?            @updatedAt
  byId           Int?
  rolePermission RolePermission[]     @relation(name: "PermissionToRolePermission")

  @@map("permission")
}

// TODO:OFFER

model Offer {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  comment          String?
  amount           Decimal
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  shopOfferpayment ShopOfferPayment[] @relation(name: "ShopOfferToPayment")
  byId             Int?
  duration         Int

  @@map("offer")
}

// TODO:PAYMENT

model ShopOfferPayment {
  id             Int       @id @default(autoincrement())
  shop           Shop      @relation(name: "PaymentToShop", fields: [shopId], references: [id])
  shopId         Int
  offer          Offer     @relation(name: "ShopOfferToPayment", fields: [offerId], references: [id])
  offerId        Int
  amount         Decimal
  byId           Int
  expirationDate DateTime
  isActive       Boolean   @default(true)
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt

  @@map("payment")
}

model ShopWalletStatus {
  id               Int            @id @default(autoincrement())
  totalCredit      Decimal
  totalDebit       Decimal?
  walletBase       ShopWalletBase @relation(fields: [shopWalletBaseId], references: [id])
  createdAt        DateTime?      @default(now())
  updatedAt        DateTime?      @updatedAt
  shopWalletBaseId Int
}

model Inventory {
  id      Int                @id @default(autoincrement())
  name    String
  shop    Shop               @relation(fields: [shopId], references: [id])
  product InventoryProduct[]
  shopId  Int
}

model InventoryProduct {
  id                Int       @id @default(autoincrement())
  name              String
  purchasePrice     Decimal // Purchase price of the product
  totalQuantity     Int // Total quantity of the product in inventory
  remainingQuantity Int // Remaining quantity of the product
  createdAt         DateTime  @default(now()) // Timestamp when the product was added
  updatedAt         DateTime  @updatedAt // Timestamp when the product was last updated
  inventory         Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId       Int
}

enum USER_TYPE {
  USER
  MERCHANT
  CUSTOMER
}

enum TransnactionTypeEnum {
  SHOP_TO_CUSTOMER
}

enum UserShopRoleEnum {
  ADMIN
  OWNER
  READ
}

enum PermissionActionEnum {
  MANAGER
  CREATE
  READ
  UPDATE
  DETAILS
  SELF
}

enum EntityEnum {
  USER
  CUSTOMER
  SHOP
}

enum CardRequestEnum {
  PENDING
  ACCEPTED
  REFUSED
}

enum LoginEnum {
  CUSTOMER
  USER
}

enum ShopUserTransactionType {
  REFUND
  LOAN

  @@map("user_alias_transaction_type")
}

enum OptViaEnum {
  MAIL
  SMS
  PUSH
}

enum OptDurationEnum {
  MIN_15
  MIN_30
  HOUR_1
  HOUR_4
  HOUR_12
  DAY_1
  DAY_15
  INFINITY
}
