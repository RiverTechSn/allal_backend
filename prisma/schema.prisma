datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// previewFeatures = ["omitApi"]
// TODO:LOGIN
model Login {
  id         Int       @id @default(autoincrement())
  type       LoginEnum
  username   String
  password   String
  isActive   Boolean   @default(true)
  isBlocked  Boolean   @default(false)
  isArchived Boolean   @default(false)
  customer   Customer? @relation(name: "CustomerToLogin")
  role       Role?     @relation(name: "LoginToRole", fields: [roleId], references: [id])
  roleId     Int?
  user       User?     @relation(name: "LoginToUser")
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  Otp        Otp[]

  @@unique([type, username])
  @@index([type])
  @@map("login")
}

// TODO:OPT
model Otp {
  id        Int             @id @default(autoincrement())
  login     Login?          @relation(fields: [loginId], references: [id])
  to        String?
  code      String
  duration  OptDurationEnum @default(MIN_15)
  via       OptViaEnum      @default(MAIL)
  createdAt DateTime?       @default(now())
  updatedAt DateTime?       @updatedAt
  loginId   Int?

  @@map("otp")
}

// TODO:USER

model User {
  id           Int        @id @default(autoincrement())
  login        Login?     @relation(name: "LoginToUser", fields: [loginId], references: [id])
  loginId      Int?       @unique
  displayname  String
  email        String?    @unique
  address      String
  phone        String     @unique
  dateOfBirth  DateTime?
  laltitude    Decimal?
  longitude    Decimal?
  walletBase   WalletBase @relation(name: "WalletBaseToUser", fields: [walletBaseId], references: [id])
  walletBaseId Int        @unique
  userShop     UserShop[] @relation(name: "UserToShop")

  @@map("user")
}

// TODO:CUSTOMER
model Customer {
  id            Int             @id @default(autoincrement())
  Login         Login?          @relation(name: "CustomerToLogin", fields: [loginId], references: [id])
  loginId       Int?            @unique
  displayname   String
  address       String?
  phone         String          @unique
  laltitude     Decimal?
  longitude     Decimal?
  dateOfBirth   DateTime?
  customerAlias CustomerAlias[] @relation(name: "CustomerToCustomerAlias")
  walletBase    WalletBase      @relation(name: "WalletBaseToCustomer", fields: [walletBaseId], references: [id])
  walletBaseId  Int             @unique
  assignment    Assignment[]    @relation(name: "AssignmentToCustomer")

  @@map("customer")
}

// TODO:CUSTOMER_ALIAS annuaire (peuvent etre creer a partir du repertoire de l utilisateur )
model CustomerAlias {
  id          Int          @id @default(autoincrement())
  displayname String
  shop        Shop         @relation(name: "CustomerAliasToShop", fields: [shopId], references: [id])
  customer    Customer     @relation(name: "CustomerToCustomerAlias", fields: [customerId], references: [id])
  customerId  Int
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt
  byId        Int?
  shopId      Int
  isActive    Boolean      @default(true)
  dept        Dept[]       @relation(name: "CustomerAliasToDept")
  debtStatus  DebtStatus[] @relation(name: "CustomerAliasToDeptStatus")

  @@map("customer_alias")
}

// TODO: DEPT_STATUS
model DebtStatus {
  id              Int           @id @default(autoincrement())
  totalCredit     Decimal
  totalDebut      Decimal
  customerAlias   CustomerAlias @relation(name: "CustomerAliasToDeptStatus", fields: [customerAliasId], references: [id])
  createdAt       DateTime?     @default(now())
  updatedAt       DateTime?     @updatedAt
  customerAliasId Int

  @@map("dept_status")
}

// TODO: DEPT
model Dept {
  id              Int                 @id @default(autoincrement())
  amount          Decimal
  comment         String?
  type            TransactionTypeEnum
  customerAlias   CustomerAlias       @relation(name: "CustomerAliasToDept", fields: [customerAliasId], references: [id])
  customerAliasId Int
  createdAt       DateTime?           @default(now())
  updatedAt       DateTime?           @updatedAt

  @@map("dept")
}

// TODO:SHOP
model Shop {
  id             Int              @id @default(autoincrement())
  walletBase     WalletBase       @relation(name: "WalletBaseToShop", fields: [walletBaseId], references: [id])
  walletBaseId   Int              @unique
  laltitude      Decimal?
  longitude      Decimal?
  address        String?
  name           String?
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @updatedAt
  byId           Int?
  cardAllocation CardAllocation[] @relation(name: "CardAllocationToShop")
  userShop       UserShop[]       @relation(name: "Shop2UserShop")
  customerAlias  CustomerAlias[]  @relation(name: "CustomerAliasToShop")
  payment        Payment[]        @relation(name: "PaymentToShop")
  cardRequest    CardRequest?     @relation(name: "ShopToCardRequest")

  @@map("shop")
}

// TODO:USER_SHOP
model UserShop {
  shop      Shop              @relation(name: "Shop2UserShop", fields: [shopId], references: [id])
  user      User              @relation(name: "UserToShop", fields: [userId], references: [id])
  shopId    Int
  userId    Int
  isActive  Boolean           @default(true)
  createdAt DateTime?         @default(now())
  updatedAt DateTime?         @updatedAt
  role      UserShopRoleEnum?

  @@id([userId, shopId])
  @@map("user_shop")
}

// TODO:WALLET_BASE
model WalletBase {
  id              Int            @id @default(autoincrement())
  type            EntityEnum
  fromTransaction Transaction[]  @relation(name: "FromTRansaction")
  toTransaction   Transaction[]  @relation(name: "ToTransaction")
  walletStatus    WalletStatus[] @relation(name: "WalletBaseToWalletStatus")
  shop            Shop?          @relation(name: "WalletBaseToShop")
  customer        Customer?      @relation(name: "WalletBaseToCustomer")
  isActive        Boolean        @default(true)
  user            User?          @relation(name: "WalletBaseToUser")

  @@map("wallet_base")
}

// TODO: WALLET_STATUS
model WalletStatus {
  id           Int        @id @default(autoincrement())
  walletBase   WalletBase @relation(name: "WalletBaseToWalletStatus", fields: [walletBaseId], references: [id])
  totalDebit   Decimal
  totalCredit  Decimal
  walletBaseId Int
  createdAt    DateTime?  @default(now())

  @@map("wallet_status")
}

// TODO:TRANSACTION
model Transaction {
  id           Int        @id @default(autoincrement())
  from         WalletBase @relation(name: "FromTRansaction", fields: [fromId], references: [id])
  to           WalletBase @relation(name: "ToTransaction", fields: [toId], references: [id])
  fromId       Int
  toId         Int
  amount       Decimal
  createdAt    DateTime?  @default(now())
  updatedAt    DateTime?  @updatedAt
  walletBaseId Int?

  @@map("transaction")
}

// TODO:CARD
model Card {
  id                   Int                    @id @default(autoincrement())
  serial               String                 @unique
  assignment           Assignment[]           @relation(name: "AssignmentToCard")
  isActive             Boolean                @default(false)
  createdAt            DateTime?              @default(now())
  updatedAt            DateTime?              @updatedAt
  cardAllocationDetail CardAllocationDetail[] @relation(name: "CardToCardAllocationDetail")
  byId                 Int?

  @@map("card")
}

// TODO:CARD_ALOCATION
model CardAllocation {
  id                   Int                    @id @default(autoincrement())
  shop                 Shop                   @relation(name: "CardAllocationToShop", fields: [shopId], references: [id])
  isActive             Boolean                @default(false)
  createdAt            DateTime?              @default(now())
  updatedAt            DateTime?              @updatedAt
  shopId               Int
  cardAllocationDetail CardAllocationDetail[] @relation(name: "CardAllocationToCardAllocationDetail")
  byId                 Int?

  @@map("card_allocation")
}

// TODO:CARD_REQUEST
model CardRequest {
  id                Int                @id @default(autoincrement())
  label             String
  isActive          Boolean            @default(false)
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  shopId            Int
  quantity          Int
  status            CardRequestEnum
  shop              Shop?              @relation(name: "ShopToCardRequest", fields: [shopId1], references: [id])
  shopId1           Int?               @unique
  byId              Int?
  cardrequeststatus CardRequestStatus? @relation(name: "CardRequestToCardRequestStatus")

  @@map("card_request")
}

// TODO:CARD_REQUEST_STATUS
model CardRequestStatus {
  id            Int             @id @default(autoincrement())
  status        CardRequestEnum
  byId          Int?
  cardRequest   CardRequest     @relation(name: "CardRequestToCardRequestStatus", fields: [cardRequestId], references: [id])
  cardRequestId Int             @unique
  comment       String?
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt

  @@map("card_request_status")
}

// TODO:CARD_ALOCATION_DETAIL
model CardAllocationDetail {
  card             Card           @relation(name: "CardToCardAllocationDetail", fields: [cardId], references: [id])
  cardAllocation   CardAllocation @relation(name: "CardAllocationToCardAllocationDetail", fields: [cardAllocationId], references: [id])
  cardId           Int
  cardAllocationId Int

  @@id([cardAllocationId, cardId])
  @@map("card_allocation_detail")
}

// TODO:ASSIGNMENT

model Assignment {
  customer   Customer  @relation(name: "AssignmentToCustomer", fields: [customerId], references: [id])
  card       Card      @relation(name: "AssignmentToCard", fields: [cardId], references: [id])
  customerId Int
  cardId     Int
  isActive   Boolean   @default(false)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  byId       Int?

  @@id([customerId, cardId])
  @@map("assignment")
}

// TODO:MODULE

model Module {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  permission Permission[] @relation(name: "ModuleToPermission")
  isActive   Boolean      @default(true)

  @@map("module")
}

// TODO:ROLE

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @updatedAt
  comment        String?
  byId           Int?
  isActive       Boolean          @default(true)
  rolePermission RolePermission[] @relation(name: "RoleToRolePermission")
  login          Login[]          @relation(name: "LoginToRole")

  @@map("role")
}

// TODO:ROLE_PERMISSION

model RolePermission {
  role         Role       @relation(name: "RoleToRolePermission", fields: [roleId], references: [id])
  permission   Permission @relation(name: "PermissionToRolePermission", fields: [permissionId], references: [id])
  roleId       Int
  permissionId Int

  @@id([roleId, permissionId])
  @@map("role_permission")
}

// TODO:PERMISSION

model Permission {
  id             Int                  @id @default(autoincrement())
  code           String               @unique
  comment        String?
  module         Module               @relation(name: "ModuleToPermission", fields: [moduleId], references: [id])
  moduleId       Int
  action         PermissionActionEnum
  createdAt      DateTime?            @default(now())
  updatedAt      DateTime?            @updatedAt
  byId           Int?
  rolePermission RolePermission[]     @relation(name: "PermissionToRolePermission")

  @@map("permission")
}

// TODO:OFFER
model Offer {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  comment   String?
  amount    Decimal
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  payment   Payment[] @relation(name: "OfferToPayment")
  byId      Int?
  duration  Int

  @@map("offer")
}

// TODO:PAYMENT
model Payment {
  id             Int       @id @default(autoincrement())
  shop           Shop      @relation(name: "PaymentToShop", fields: [shopId], references: [id])
  shopId         Int
  offer          Offer?    @relation(name: "OfferToPayment", fields: [offerId], references: [id])
  offerId        Int
  amount         Decimal
  byId           Int
  expirationDate DateTime
  isActive       Boolean   @default(true)
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt

  @@map("payment")
}

enum UserShopRoleEnum {
  ADMIN
  OWNER
  READ
}

enum PermissionActionEnum {
  MANAGER
  CREATE
  READ
  UPDATE
  DETAILS
  SELF
}

enum EntityEnum {
  USER
  CUSTOMER
  SHOP
}

enum CardRequestEnum {
  PENDING
  ACCEPTED
  REFUSED
}

enum LoginEnum {
  CUSTOMER
  USER
}

enum TransactionTypeEnum {
  CREDIT
  DEBIT
}

enum OptViaEnum {
  MAIL
  SMS
  PUSH
}

enum OptDurationEnum {
  MIN_15
  MIN_30
  HOUR_1
  HOUR_4
  HOUR_12
  DAY_1
  DAY_15
  INFINITY
}
