datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model LoginBase {
    id         Int       @id @default(autoincrement())
    isActive   Boolean   @default(true)
    isDeleted  Boolean   @default(false)
    isLocked   Boolean   @default(false)
    isVerified Boolean   @default(false)
    isAdmin    Boolean   @default(false)
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
    deleteById    Int?
    lastUpdatedById Int?
    
    User       User[]

    @@map("login_base")
}

model User {
    id        Int        @id @default(autoincrement())
    name      String
    email     String     @unique
    password  String
    phone     String?    @unique
    address   String?
    latitude  Float?
    longitude Float?
    login     LoginBase? @relation(fields: [loginId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    loginId   Int?       @unique
    company   Company?   @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    companyId Int?

    @@map("user")
}

model Company {
    id              Int           @id @default(autoincrement())
    name            String
    comment         String?
    logoPath        String?
    isActive        Boolean       @default(true)
    isDeleted       Boolean       @default(false)
    isLocked        Boolean       @default(false)
    deletedAt       DateTime?
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    deleteById      Int?
    createdById     Int?
    lastUpdatedById Int?
    email           String        @unique
    phone           String?       @unique
    address         String?
    latitude        Float?
    longitude       Float?
    beneficiary     Beneficiary[]
    User            User[]
    type         String?
    point Point[]

    @@map("company")
}

model Role {
    id              Int              @id @default(autoincrement())
    name            String
    isActive        Boolean          @default(true)
    isDeleted       Boolean          @default(false)
    isLocked        Boolean          @default(false)
    deletedAt       DateTime?
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    deleteById      Int?
    createdById     Int?
    lastUpdatedById Int?
    RolePermission  RolePermission[]
    @@map("role")
}

model RolePermission {
    id           Int         @id @default(autoincrement())
    isActive     Boolean     @default(true)
    createdAt    DateTime    @default(now())
    createdById  Int?
    roleId       Int?
    permissionId Int?
    role         Role?       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    permission   Permission? @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    @@map("role_permission")
}

model Table {
    id         Int          @id @default(autoincrement())
    name       String
    Permission Permission[]
    @@map("table")
}

model Permission {
    id              Int              @id @default(autoincrement())
    code            String
    isActive        Boolean          @default(true)
    isDeleted       Boolean          @default(false)
    isLocked        Boolean          @default(false)
    deletedAt       DateTime?
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    table           Table?           @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    tableId         Int?
    deleteById      Int?
    createdById     Int?
    lastUpdatedById Int?
    RolePermission  RolePermission[]
    @@map("permission")
}

model Beneficiary {
    id                      Int                       @id @default(autoincrement())
    name                    String
    deletedAt               DateTime?
    createdAt               DateTime                  @default(now())
    updatedAt               DateTime                  @updatedAt
    email                   String?                   @unique
    phone                   String?                   @unique
    address                 String?
    latitude                Float?
    longitude               Float?
    deleteById              Int?
    createdById             Int?
    lastUpdatedById         Int?
    isActive                Boolean                   @default(true)
    isDeleted               Boolean                   @default(false)
    isLocked                Boolean                   @default(false)
    companyId               Int?
    company                 Company?                  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    beneficiaryGroupMapping BeneficiaryGroupMapping[]
    @@map("beneficiary_base")
}

model BeneficiaryGroup {
    id                      Int                       @id @default(autoincrement())
    name                    String
    deletedAt               DateTime?
    createdAt               DateTime                  @default(now())
    updatedAt               DateTime                  @updatedAt
    deleteById              Int?
    createdById             Int?
    lastUpdatedById         Int?
    isActive                Boolean                   @default(true)
    isDeleted               Boolean                   @default(false)
    isLocked                Boolean                   @default(false)
    beneficiaryGroupMapping BeneficiaryGroupMapping[]
    @@map("beneficiary_group")
}

model BeneficiaryGroupMapping {
    id                          Int               @id @default(autoincrement())
    isActive                    Boolean           @default(true)
    isDeleted                   Boolean           @default(false)
    isLocked                    Boolean           @default(false)
    amount                      Decimal?
    isRetired                   Boolean?          @default(false)
    retiriredAt                 DateTime?
    isDeletedByBeneficiaryGroup Boolean?          @default(false)
    createdAt                   DateTime          @default(now())
    updatedAt                   DateTime          @updatedAt
    deletedAt                   DateTime?
    deleteById                  Int?
    createdById                 Int?
    lastUpdatedById             Int?
    beneficiaryGroupId          Int?
    beneficiaryId               Int?
    retiredByIId                Int?
    beneficiaryGroup            BeneficiaryGroup? @relation(fields: [beneficiaryGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    beneficiary                 Beneficiary?      @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    @@map("beneficiary_group_mapping")
}
model Point{
    id         Int       @id @default(autoincrement())
    name       String
    isActive   Boolean   @default(true)
    isDeleted  Boolean   @default(false)
    isLocked   Boolean   @default(false)
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
    companyId  Int?
    company    Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map("point")
}


enum CompanyType {
    BENEFICIARY
    MERCHANT
}
