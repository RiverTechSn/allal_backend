datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    // previewFeatures = ["omitApi"]
}

// TODO: Login
model Login {
    id       Int       @id @default(autoincrement())
    type     LoginEnum
    username String
    password String

    customer Customer?
    role     Role      @relation(fields: [roleId], references: [id])
    roleId   Int
    User     User?

    @@unique([type, username])
    @@index([type])
    @@map("login")
}

// TODO:USER 
model User {
    id       Int        @id @default(autoincrement())
    Login    Login?     @relation(fields: [loginId], references: [id])
    loginId  Int?       @unique
    shopId   Int
    userShop UserShop[]

    @@map("user")
}

// TODO:CUSTOMER
model Customer {
    id            Int             @id @default(autoincrement())
    Login         Login?          @relation(fields: [loginId], references: [id])
    loginId       Int?            @unique
    phone         String?         @unique
    address       String?
    laltitude     Decimal?
    longitude     Decimal?
    CustomerAlias CustomerAlias[]
    EntityBase    BaseEntity      @relation(fields: [entityBaseId], references: [id])
    entityBaseId  Int             @unique

    assignment Assignment[]

    @@map("customer")
}

// TODO:CUSTOMER_ALIAS annuaire (peuvent etre creer a partir du repertoire de l utilisateur )
model CustomerAlias {
    id         Int          @id @default(autoincrement())
    shop       Shop         @relation(fields: [shopId], references: [id])
    customer   Customer     @relation(fields: [customerId], references: [id])
    customerId Int
    createdAt  DateTime?    @default(now())
    updatedAt  DateTime?    @updatedAt
    byId       Int?
    shopId     Int
    isActive   Boolean      @default(true)
    Dept       Dept[]
    DebtStatus DebtStatus[]

    @@map("customer_alias")
}

// TODO: DEPT_STATUS
model DebtStatus {
    id              Int           @id @default(autoincrement())
    totalCredit     Decimal
    totalDebut      Decimal
    customerAlias   CustomerAlias @relation(fields: [customerAliasId], references: [id])
    createdAt       DateTime?     @default(now())
    updatedAt       DateTime?     @updatedAt
    customerAliasId Int
}

// TODO: DEPT
model Dept {
    id              Int                 @id @default(autoincrement())
    amount          Decimal
    comment         String?
    type            TransactionTypeEnum
    customerAlias   CustomerAlias       @relation(fields: [customerAliasId], references: [id])
    customerAliasId Int
    createdAt       DateTime?           @default(now())
    updatedAt       DateTime?           @updatedAt
}

// TODO:SHOP
model Shop {
    id Int @id @default(autoincrement())

    entityBase     BaseEntity       @relation(fields: [entityBaseId], references: [id])
    entityBaseId   Int              @unique
    createdAt      DateTime?        @default(now())
    updatedAt      DateTime?        @updatedAt
    byId           Int?
    CustomerAlias  CustomerAlias[]
    CardAllocation CardAllocation[]
    UserShop       UserShop[]

    @@map("shop")
}

// TODO:USER 
model UserShop {
    shop   Shop @relation(fields: [shopId], references: [id])
    user   User @relation(fields: [userId], references: [id])
    shopId Int
    userId Int

    @@id([userId, shopId])
}

// TODO:ENTITY_BASE
model BaseEntity {
    id   Int        @id @default(autoincrement())
    type EntityEnum

    fromTransaction Transaction[]  @relation(name: "from_transaction")
    toTransaction   Transaction[]  @relation(name: "to_transaction")
    walletStatus    WalletStatus[]
    shop            Shop?
    customer        Customer?

    @@map("entity_base")
}

// TODO: WALLET_STATUS

model WalletStatus {
    id           Int        @id @default(autoincrement())
    walletBase   BaseEntity @relation(fields: [walletBaseId], references: [id])
    totalDebit   Decimal
    totalCredit  Decimal
    walletBaseId Int
    createdAt    DateTime?  @default(now())

    @@map("wallet_status")
}

// TODO:TRANSACTION
model Transaction {
    id           Int        @id @default(autoincrement())
    from         BaseEntity @relation(name: "from_transaction", fields: [fromId], references: [id])
    to           BaseEntity @relation(name: "to_transaction", fields: [toId], references: [id])
    fromId       Int
    toId         Int
    amount       Decimal
    createdAt    DateTime?  @default(now())
    updatedAt    DateTime?  @updatedAt
    walletBaseId Int?

    @@map("transaction")
}

// TODO:CARD
model Card {
    id                   Int                    @id @default(autoincrement())
    serial               String                 @unique
    Assignment           Assignment[]
    isACtive             Boolean                @default(false)
    createdAt            DateTime?              @default(now())
    updatedAt            DateTime?              @updatedAt
    CardAllocationDetail CardAllocationDetail[]
}

// TODO:CARD_ALOCATION
model CardAllocation {
    id                   Int                    @id @default(autoincrement())
    shop                 Shop                   @relation(fields: [shopId], references: [id])
    isACtive             Boolean                @default(false)
    createdAt            DateTime?              @default(now())
    updatedAt            DateTime?              @updatedAt
    shopId               Int
    CardAllocationDetail CardAllocationDetail[]
}

// TODO:CARD_ALOCATION
model CardAllocationDetail {
    card             Card           @relation(fields: [cardId], references: [id])
    cardAllocation   CardAllocation @relation(fields: [cardAllocationId], references: [id])
    cardId           Int
    cardAllocationId Int

    @@id([cardAllocationId, cardId])
}

// TODO:ASSIGNMENT
model Assignment {
    customer   Customer  @relation(fields: [customerId], references: [id])
    card       Card      @relation(fields: [cardId], references: [id])
    customerId Int
    cardId     Int
    isACtive   Boolean   @default(false)
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt

    @@id([customerId, cardId])
}

// TODO:MODULE
model Module {
    id         Int          @id @default(autoincrement())
    name       String       @unique
    Permission Permission[]

    @@map("module")
}

// TODO:ROLE
model Role {
    id   Int    @id @default(autoincrement())
    name String @unique

    createdAt      DateTime?        @default(now())
    updatedAt      DateTime?        @updatedAt
    comment        String?
    byId           Int?
    isActive       Boolean          @default(true)
    rolePermission RolePermission[]
    login          Login[]

    @@map("role")
}

// TODO:ROLE_PERMISSION
model RolePermission {
    role         Role       @relation(fields: [roleId], references: [id])
    permission   Permission @relation(fields: [permissionId], references: [id])
    roleId       Int
    permissionId Int
   
    @@id([roleId, permissionId])
    @@map("role_permission")
}

// TODO:PERMISSION
model Permission {
    id             Int                  @id @default(autoincrement())
    code           String               @unique
    comment        String?
    module         Module               @relation(fields: [moduleId], references: [id])
    moduleId       Int
    action         PermissionActionEnum
    createdAt      DateTime?            @default(now())
    updatedAt      DateTime?            @updatedAt
    byId           Int?
    RolePermission RolePermission[]

    @@map("permission")
}

// TODO: ENUM
enum UserShopRoleEnum {
    ADMIN
    OWNER
}

enum PermissionActionEnum {
    ALL
    CREATE
    READ
    UPDATE
    DETAILS
    SELF
}

enum EntityEnum {
    Company
    Customer
    Gym
}

enum CardRequestEnum {
    PENDING
    ACCEPTED
    REFUSED
}

enum LoginEnum {
    CUSTOMER
    USER
}

enum TransactionTypeEnum {
    CREDIT
    DEBIT
}
