
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.5.0
 * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
 */
Prisma.prismaVersion = {
  client: "6.5.0",
  engine: "173f8d54f8d52e692c7e27e72a88314ec7aeff60"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.LoginScalarFieldEnum = {
  id: 'id',
  type: 'type',
  username: 'username',
  password: 'password',
  isActive: 'isActive',
  isBlocked: 'isBlocked',
  roleId: 'roleId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  to: 'to',
  code: 'code',
  duration: 'duration',
  via: 'via',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  loginId: 'loginId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  loginId: 'loginId',
  displayname: 'displayname',
  email: 'email',
  address: 'address',
  phone: 'phone',
  dateOfBirth: 'dateOfBirth',
  laltitude: 'laltitude',
  longitude: 'longitude',
  walletBaseId: 'walletBaseId'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  loginId: 'loginId',
  address: 'address',
  phone: 'phone',
  laltitude: 'laltitude',
  longitude: 'longitude',
  dateOfBirth: 'dateOfBirth',
  walletBaseId: 'walletBaseId'
};

exports.Prisma.CustomerAliasScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  byId: 'byId',
  shopId: 'shopId',
  isActive: 'isActive'
};

exports.Prisma.DebtStatusScalarFieldEnum = {
  id: 'id',
  totalCredit: 'totalCredit',
  totalDebut: 'totalDebut',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerAliasId: 'customerAliasId'
};

exports.Prisma.DeptScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  comment: 'comment',
  type: 'type',
  customerAliasId: 'customerAliasId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShopScalarFieldEnum = {
  id: 'id',
  walletBaseId: 'walletBaseId',
  laltitude: 'laltitude',
  longitude: 'longitude',
  address: 'address',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  byId: 'byId'
};

exports.Prisma.UserShopScalarFieldEnum = {
  shopId: 'shopId',
  userId: 'userId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  role: 'role'
};

exports.Prisma.WalletBaseScalarFieldEnum = {
  id: 'id',
  type: 'type',
  isActive: 'isActive'
};

exports.Prisma.WalletStatusScalarFieldEnum = {
  id: 'id',
  totalDebit: 'totalDebit',
  totalCredit: 'totalCredit',
  walletBaseId: 'walletBaseId',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  fromId: 'fromId',
  toId: 'toId',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  walletBaseId: 'walletBaseId'
};

exports.Prisma.CardScalarFieldEnum = {
  id: 'id',
  serial: 'serial',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  byId: 'byId'
};

exports.Prisma.CardAllocationScalarFieldEnum = {
  id: 'id',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  shopId: 'shopId',
  byId: 'byId'
};

exports.Prisma.CardRequestScalarFieldEnum = {
  id: 'id',
  label: 'label',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  shopId: 'shopId',
  quantity: 'quantity',
  status: 'status',
  shopId1: 'shopId1',
  byId: 'byId'
};

exports.Prisma.CardRequestStatusScalarFieldEnum = {
  id: 'id',
  status: 'status',
  byId: 'byId',
  cardRequestId: 'cardRequestId',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CardAllocationDetailScalarFieldEnum = {
  cardId: 'cardId',
  cardAllocationId: 'cardAllocationId'
};

exports.Prisma.AssignmentScalarFieldEnum = {
  customerId: 'customerId',
  cardId: 'cardId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  byId: 'byId'
};

exports.Prisma.ModuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  comment: 'comment',
  byId: 'byId',
  isActive: 'isActive'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  roleId: 'roleId',
  permissionId: 'permissionId'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  comment: 'comment',
  moduleId: 'moduleId',
  action: 'action',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  byId: 'byId'
};

exports.Prisma.OfferScalarFieldEnum = {
  id: 'id',
  name: 'name',
  comment: 'comment',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  byId: 'byId',
  duration: 'duration'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  shopId: 'shopId',
  offerId: 'offerId',
  amount: 'amount',
  byId: 'byId',
  expirationDate: 'expirationDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.LoginOrderByRelevanceFieldEnum = {
  username: 'username',
  password: 'password'
};

exports.Prisma.OtpOrderByRelevanceFieldEnum = {
  to: 'to',
  code: 'code'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  displayname: 'displayname',
  email: 'email',
  address: 'address',
  phone: 'phone'
};

exports.Prisma.CustomerOrderByRelevanceFieldEnum = {
  address: 'address',
  phone: 'phone'
};

exports.Prisma.DeptOrderByRelevanceFieldEnum = {
  comment: 'comment'
};

exports.Prisma.ShopOrderByRelevanceFieldEnum = {
  address: 'address',
  name: 'name'
};

exports.Prisma.CardOrderByRelevanceFieldEnum = {
  serial: 'serial'
};

exports.Prisma.CardRequestOrderByRelevanceFieldEnum = {
  label: 'label'
};

exports.Prisma.CardRequestStatusOrderByRelevanceFieldEnum = {
  comment: 'comment'
};

exports.Prisma.ModuleOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.RoleOrderByRelevanceFieldEnum = {
  name: 'name',
  comment: 'comment'
};

exports.Prisma.PermissionOrderByRelevanceFieldEnum = {
  code: 'code',
  comment: 'comment'
};

exports.Prisma.OfferOrderByRelevanceFieldEnum = {
  name: 'name',
  comment: 'comment'
};
exports.LoginEnum = exports.$Enums.LoginEnum = {
  CUSTOMER: 'CUSTOMER',
  USER: 'USER'
};

exports.OptDurationEnum = exports.$Enums.OptDurationEnum = {
  MIN_15: 'MIN_15',
  MIN_30: 'MIN_30',
  HOUR_1: 'HOUR_1',
  HOUR_4: 'HOUR_4',
  HOUR_12: 'HOUR_12',
  DAY_1: 'DAY_1',
  DAY_15: 'DAY_15',
  INFINITY: 'INFINITY'
};

exports.OptViaEnum = exports.$Enums.OptViaEnum = {
  MAIL: 'MAIL',
  SMS: 'SMS',
  PUSH: 'PUSH'
};

exports.TransactionTypeEnum = exports.$Enums.TransactionTypeEnum = {
  CREDIT: 'CREDIT',
  DEBIT: 'DEBIT'
};

exports.UserShopRoleEnum = exports.$Enums.UserShopRoleEnum = {
  ADMIN: 'ADMIN',
  OWNER: 'OWNER',
  READ: 'READ'
};

exports.EntityEnum = exports.$Enums.EntityEnum = {
  USER: 'USER',
  CUSTOMER: 'CUSTOMER',
  SHOP: 'SHOP'
};

exports.CardRequestEnum = exports.$Enums.CardRequestEnum = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REFUSED: 'REFUSED'
};

exports.PermissionActionEnum = exports.$Enums.PermissionActionEnum = {
  MANAGER: 'MANAGER',
  CREATE: 'CREATE',
  READ: 'READ',
  UPDATE: 'UPDATE',
  DETAILS: 'DETAILS',
  SELF: 'SELF'
};

exports.Prisma.ModelName = {
  Login: 'Login',
  Otp: 'Otp',
  User: 'User',
  Customer: 'Customer',
  CustomerAlias: 'CustomerAlias',
  DebtStatus: 'DebtStatus',
  Dept: 'Dept',
  Shop: 'Shop',
  UserShop: 'UserShop',
  WalletBase: 'WalletBase',
  WalletStatus: 'WalletStatus',
  Transaction: 'Transaction',
  Card: 'Card',
  CardAllocation: 'CardAllocation',
  CardRequest: 'CardRequest',
  CardRequestStatus: 'CardRequestStatus',
  CardAllocationDetail: 'CardAllocationDetail',
  Assignment: 'Assignment',
  Module: 'Module',
  Role: 'Role',
  RolePermission: 'RolePermission',
  Permission: 'Permission',
  Offer: 'Offer',
  Payment: 'Payment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
